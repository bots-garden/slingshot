version: '3'

description: >
  # Everything you need to create a release

  To create a release:

  - Merge the PR on main(?)
  - Update `infos/version.txt` (or something else)
  - Then, set the tag version (`v.N.N.N`)
  - Then, create the release with the following command
  ```bash
  task release:create
  ```
  - Build the binaries
  ```bash
  task release:build
  ```
  - Create a release on GitHub
  - Publish the binaries to the GitHub release
  - Build Docker images
  ```bash
  task release:docker-linux-amd64
  task release:docker-linux-arm64
  ```

env:
  TAG: "v0.0.5" # for git
  IMAGE_TAG: "0.0.5"
  IMAGE_BASE_NAME: "slingshot"
  APPLICATION_NAME: "slingshot"
  NICK_NAME: "üê≥ [spouting whale]"

tasks:

  # task release:check
  check:
    cmds:
      - echo "${TAG}"
      - echo -n "${TAG} ${NICK_NAME}" > ./slingshot-server/infos/version.txt


  # task release:create
  create:
    cmds:
      - echo "üì¶ Generating release..."
      - echo -n "${TAG} ${NICK_NAME}" > ./slingshot-server/infos/version.txt
      - git add .
      - git commit -m "üì¶ create release ${TAG}"
      - git tag ${TAG}
      - git tag go-pdk/${TAG}
      - git push origin main ${TAG} go-pdk/${TAG}
  
  # task release:remove-tag
  remove-tag:
    cmds:
      - git tag -d ${TAG}
      - git tag -d go-pdk/${TAG}

  # task release:build
  build:
    cmds:
      - | 
        cd slingshot-server
        env CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o slingshot-${TAG}-darwin-arm64
        env CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o slingshot-${TAG}-darwin-amd64
        env CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o slingshot-${TAG}-linux-arm64
        env CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o slingshot-${TAG}-linux-amd64
        mv slingshot-${TAG}-* ../release

  # task release:before-run-docker
  # # https://www.baeldung.com/linux/docker-permission-denied-daemon-socket-error
  before-run-docker:
    cmds:
      - |
        sudo chmod 666 /var/run/docker.sock
        ls -l /var/run/docker.sock
        sudo systemctl restart docker.service

  # task release:docker-multi-arch
  docker-multi-arch:
    cmds: 
      - |
        echo -n "${TAG} ${NICK_NAME}" > ./slingshot-server/infos/version.txt

        cd slingshot-server
        set -o allexport; source .env; set +o allexport

        env CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o linux/arm64/${APPLICATION_NAME}
        env CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o linux/amd64/${APPLICATION_NAME}

        docker login -u ${DOCKER_USER} -p ${DOCKER_PWD}
        docker buildx create --use
        docker buildx build -t ${DOCKER_USER}/${IMAGE_BASE_NAME}:${IMAGE_TAG} --platform=linux/arm64,linux/amd64 . --push

  # ----------------------------------------
  # üê≥ Testing Docker image of slingshot
  # ----------------------------------------
  # task release:test-container
  test-container:
    env:
      #GOOS: "linux"
      #GOARCH: "arm64"
      HTTP_PORT: "8080"
    cmds:
      - | 
        set -o allexport; source slingshot-server/.env; set +o allexport
        echo "üñºÔ∏è ${DOCKER_USER}/${IMAGE_BASE_NAME}:${IMAGE_TAG}"

        docker run \
          -p ${HTTP_PORT}:${HTTP_PORT} \
          -v $(pwd)/examples-pdk/go/02-hello-service:/app --rm ${DOCKER_USER}/${IMAGE_BASE_NAME}:${IMAGE_TAG} \
          /slingshot start \
          --wasm=./app/hello.wasm \
          --handler=callHandler \
          --http-port=${HTTP_PORT} 

  # task release:test-query
  test-query:
    env:
      HTTP_PORT: "8080"
    cmds:
      - |
        curl -X POST http://localhost:${HTTP_PORT} \
          -H 'Content-Type: text/plain; charset=utf-8' \
          -d "üòÑ Bob Morane"
        echo ""

  # task release:test-stop-container
  test-stop-container:
    env:
      GOOS: "linux"
      GOARCH: "arm64"
    cmds:
      - |
        set -o allexport; source slingshot-server/.env; set +o allexport
        echo "üñºÔ∏è ${DOCKER_USER}/${IMAGE_BASE_NAME}:${IMAGE_TAG}"
        docker stop $(docker ps -q --filter ancestor=${DOCKER_USER}/${IMAGE_BASE_NAME}:${IMAGE_TAG} )

